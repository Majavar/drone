MEMORY
{
    FLASH (rx) : ORIGIN = {{addr config.memory.flash.origin}}, LENGTH = {{size config.memory.flash.size}}
    RAM (wx) : ORIGIN = {{addr config.memory.ram.origin}}, LENGTH = {{size config.memory.ram.size}}
}

ENTRY(reset);

SECTIONS
{
    STACK_POINTER = DEFINED(_section_size_unknown)
        ? ORIGIN(RAM)
        : ORIGIN(RAM) + LENGTH(RAM) - _bss_section_size - _data_section_size - _heap_section_size;

    .vtable ORIGIN(FLASH) :
    {
        LONG(STACK_POINTER);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH

    .text :
    {
        *(.text.*);
        . = ALIGN(4);
    } > FLASH

    .rodata :
    {
        *(.rodata.*);
        . = ALIGN(4);
    } > FLASH

    .bss STACK_POINTER (NOLOAD) :
    {
        BSS_START = .;
        *(.bss.*);
        *(COMMON);
        . = ALIGN(4);
        BSS_END = .;
    } > RAM

    .data ADDR(.bss) + SIZEOF(.bss) :
    {
        DATA_LOAD = LOADADDR(.data);
        DATA_START = .;
        *(.data.*);
        . = ALIGN(4);
        DATA_END = .;
    } > RAM AT > FLASH

    .heap ADDR(.data) + SIZEOF(.data) (NOLOAD) :
    {
        HEAP_START = .;
        . += {{size config.heap.size}};
        . = ALIGN(4);
        HEAP_END = .;
    } > RAM

    /DISCARD/ :
    {
        *(.ARM.*)
    }
}

{{#each config.linker.include}}
INCLUDE {{this}};
{{/each}}
