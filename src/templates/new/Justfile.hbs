export DRONE_RUSTFLAGS := '--cfg {{platform_flag_name}}="{{platform_flag}}" --cfg {{bindings_flag_name}}="{{bindings_flag}}"'
target := '{{device_target}}'
features := ''
cargo_features := '-Z features=itarget,build_dep,dev_dep -Z package-features'
name := `basename $(pwd)`
release_bin := "target/" + target + "/release/" + name

# Install dependencies
deps:
	rustup target add \{{target}}
	rustup component add rust-src
	rustup component add rustfmt
	rustup component add clippy
	rustup component add llvm-tools-preview
	type cargo-objdump >/dev/null || cargo +stable install cargo-binutils
	type drone >/dev/null || cargo install drone

# Reformat the source code
fmt:
	cargo \{{cargo_features}} fmt

# Check for mistakes
lint:
	drone env \{{target}} -- cargo \{{cargo_features}} clippy --features "\{{features}}"

# Build the firmware
build:
	drone env \{{target}} -- cargo \{{cargo_features}} build --features "\{{features}}" --release

# Generate the docs
doc:
	drone env \{{target}} -- cargo \{{cargo_features}} doc --features "\{{features}}"

# Open the docs in the browser
doc-open: doc
	drone env \{{target}} -- cargo \{{cargo_features}} doc --features "\{{features}}" --open

# Run the tests
test:
	drone env -- cargo \{{cargo_features}} test --features "std \{{features}}"

# Display information from the compiled firmware
dump: build
	drone env \{{target}} -- cargo \{{cargo_features}} objdump --target \{{target}} \
		--features "\{{features}}" --release --bin \{{name}} -- \
		--disassemble --demangle --full-contents -all-headers --syms | pager

# Display section sizes inside the compiled firmware
size +args='': build
	drone env \{{target}} -- cargo \{{cargo_features}} size --target \{{target}} \
		--features "\{{features}}" --release --bin \{{name}} -- \{{args}}

# Display result of macro expansion
expand:
	drone env \{{target}} -- cargo \{{cargo_features}} rustc --target \{{target}} \
		--features "\{{features}}" --lib -- -Z unstable-options --pretty=expanded

# Force a pulse on the reset line of the attached device
reset:
	drone reset

# Flash the firmware to the attached device
flash: build
	drone flash \{{release_bin}}

# Run a GDB session for the attached device
gdb:
	drone gdb \{{release_bin}} --reset

# Run a GDB session for the attached device as a backend for a debugger GUI or an IDE
@gdb-mi:
	drone gdb \{{release_bin}} --reset -i=mi -- -nx

# Display log output from the attached device
log:
	drone log --reset :0:1

# Record `heaptrace` file from the attached device (should be compiled with `heaptrace` feature)
heaptrace:
	truncate -s0 heaptrace
	drone log --reset :0:1 heaptrace:31
